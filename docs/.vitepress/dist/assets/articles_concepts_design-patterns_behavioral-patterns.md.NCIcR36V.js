import{_ as t,c as a,a3 as o,o as i}from"./chunks/framework.ohJJpums.js";const n="/concepts/design-patterns/dp-obsv.png",u=JSON.parse('{"title":"Behavioral Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"articles/concepts/design-patterns/behavioral-patterns.md","filePath":"articles/concepts/design-patterns/behavioral-patterns.md"}'),s={name:"articles/concepts/design-patterns/behavioral-patterns.md"};function r(c,e,l,d,h,b){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="behavioral-patterns" tabindex="-1">Behavioral Patterns <a class="header-anchor" href="#behavioral-patterns" aria-label="Permalink to &quot;Behavioral Patterns&quot;">â€‹</a></h1><p><em>Last Updated: Dec 7, 2024</em></p><p>Behavioral patterns focus on communication and responsibilities between objects, making interactions more flexible and organized.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>I am only listing the ones that I&#39;ve been dealing with or interact with a couple of times ðŸ˜ƒ</p></div><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">â€‹</a></h2><ul><li><code>Observer</code>: Notifies multiple objects of state changes in a central object, great for event-driven systems.</li><li><code>State</code>: Allows an objectâ€™s behavior to change based on its internal state.</li><li><code>Template Method</code>: Defines a skeleton of an algorithm, allowing subclasses to customize parts of it.</li></ul><h2 id="observer-pattern" tabindex="-1">Observer Pattern <a class="header-anchor" href="#observer-pattern" aria-label="Permalink to &quot;Observer Pattern&quot;">â€‹</a></h2><h3 id="definition" tabindex="-1">Definition <a class="header-anchor" href="#definition" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>Observer Pattern</code> establishes a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically.</p><ul><li><code>Subject</code> is an object that maintains a list of observers and notifies them of state changes.</li><li><code>Observers</code> are objects that subscribe to the subject to receive updates.</li></ul><h3 id="flow" tabindex="-1">Flow <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><div style="display:flex;justify-content:center;"><img src="'+n+'" alt="Diagram representing how the MVC design pattern works"></div><ul><li><code>State Change</code>: The <code>Subject</code>&#39;s state changes (e.g., data is updated).</li><li><code>Notification</code>: The <code>Subject</code> notifies all registered <code>Observers</code> of the change.</li><li><code>Observer Reaction</code>: Each <code>Observer</code> reacts to the notification, which may involve updating the UI or performing some other action.</li></ul><h2 id="state-pattern" tabindex="-1">State Pattern <a class="header-anchor" href="#state-pattern" aria-label="Permalink to &quot;State Pattern&quot;">â€‹</a></h2><h3 id="definition-1" tabindex="-1">Definition <a class="header-anchor" href="#definition-1" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>State Pattern</code> establishes a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically.</p><ul><li><code>Subject</code> is an object that maintains a list of observers and notifies them of state changes.</li><li><code>Observers</code> are objects that subscribe to the subject to receive updates.</li></ul><h3 id="flow-1" tabindex="-1">Flow <a class="header-anchor" href="#flow-1" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><ul><li><code>State Change</code>: The <code>Subject</code>&#39;s state changes (e.g., data is updated).</li><li><code>Notification</code>: The <code>Subject</code> notifies all registered <code>Observers</code> of the change.</li><li><code>Observer Reaction</code>: Each <code>Observer</code> reacts to the notification, which may involve updating the UI or performing some other action.</li></ul><h2 id="template-method-pattern" tabindex="-1">Template Method Pattern <a class="header-anchor" href="#template-method-pattern" aria-label="Permalink to &quot;Template Method Pattern&quot;">â€‹</a></h2><h3 id="definition-2" tabindex="-1">Definition <a class="header-anchor" href="#definition-2" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>Template Method Pattern</code> establishes a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically.</p><ul><li><code>Subject</code> is an object that maintains a list of observers and notifies them of state changes.</li><li><code>Observers</code> are objects that subscribe to the subject to receive updates.</li></ul><h3 id="flow-2" tabindex="-1">Flow <a class="header-anchor" href="#flow-2" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><ul><li><code>State Change</code>: The <code>Subject</code>&#39;s state changes (e.g., data is updated).</li><li><code>Notification</code>: The <code>Subject</code> notifies all registered <code>Observers</code> of the change.</li><li><code>Observer Reaction</code>: Each <code>Observer</code> reacts to the notification, which may involve updating the UI or performing some other action.</li></ul>',25)]))}const f=t(s,[["render",r]]);export{u as __pageData,f as default};
