import{_ as i,c as a,a3 as e,o as t}from"./chunks/framework.ohJJpums.js";const g=JSON.parse('{"title":"@Bindable vs. @Binding in SwiftUI: What’s the difference?","description":"","frontmatter":{},"headers":[],"relativePath":"articles/ios/bindable-vs-binding-swiftui.md","filePath":"articles/ios/bindable-vs-binding-swiftui.md"}'),n={name:"articles/ios/bindable-vs-binding-swiftui.md"};function l(h,s,p,r,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="bindable-vs-binding-in-swiftui-what-s-the-difference" tabindex="-1">@Bindable vs. @Binding in SwiftUI: What’s the difference? <a class="header-anchor" href="#bindable-vs-binding-in-swiftui-what-s-the-difference" aria-label="Permalink to &quot;@Bindable vs. @Binding in SwiftUI: What’s the difference?&quot;">​</a></h1><p><em>Last Updated: Dec 7, 2024</em></p><p>SwiftUI offers powerful tools to manage data flow between views, and two key players in this system are <strong>@Binding</strong> and <strong>@Bindable</strong>. While both serve to connect data across views, they address slightly different use cases.</p><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>Feature</strong></th><th><strong><code>@Binding</code></strong></th><th><strong><code>@Bindable</code></strong></th></tr></thead><tbody><tr><td><strong>Purpose</strong></td><td>Connects a simple property between views.</td><td>Binds specific properties in complex objects.</td></tr><tr><td><strong>Scope</strong></td><td>Limited to parent-child view relationships.</td><td>Often used with Observable.</td></tr><tr><td><strong>Use Case</strong></td><td>Toggles, sliders, or other direct interactions.</td><td>View models, shared states, or complex data.</td></tr><tr><td><strong>Complexity</strong></td><td>Simple and straightforward.</td><td>Handles more advanced binding scenarios.</td></tr></tbody></table><h2 id="binding" tabindex="-1"><strong>@Binding</strong> <a class="header-anchor" href="#binding" aria-label="Permalink to &quot;**@Binding**&quot;">​</a></h2><p>The <code>@Binding</code> property wrapper creates a <strong>two-way connection</strong> between a child view and a property owned by a parent view. Behind the scenes, it is essentially a lightweight wrapper for a reference to a value. It doesn’t own the value itself but serves as a “link” to the value owned by another view.</p><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li><strong>Two-way data flow</strong>: When the child modifies the property, those changes are reflected in the parent view, and vice versa.</li><li><strong>Scoped to views</strong>: Often used when a parent view needs to pass a value to its child while retaining control over the property.</li><li><strong>Use case</strong>: When you pass data between views in SwiftUI.</li></ul><h3 id="example" tabindex="-1"><strong>Example</strong> <a class="header-anchor" href="#example" aria-label="Permalink to &quot;**Example**&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $isOn) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Passing the state as a binding</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		Toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Toggle Switch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $isOn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li>The ParentView owns the <code>isOn</code> state.</li><li>It passes the state down to ChildView using <code>$isOn</code>.</li><li>Changes in the toggle automatically update the <code>isOn</code> property in <strong>ParentView.</strong></li></ol><h2 id="bindable" tabindex="-1"><strong>@Bindable</strong> <a class="header-anchor" href="#bindable" aria-label="Permalink to &quot;**@Bindable**&quot;">​</a></h2><p>The <code>@Bindable</code> property wrapper was introduced with the <strong>Observableobject</strong> pattern, and provides a way to bind specific properties of an Observable model directly to a view. Behind the scenes, it relies on SwiftUI&#39;s <strong>Observable</strong> and <strong>@State</strong> ecosystem. It ensures views automatically refresh when the state changes in a more complex object, such as a view model.</p><h3 id="key-features-1" tabindex="-1">Key Features <a class="header-anchor" href="#key-features-1" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li><strong>Observable binding</strong>: Automatically updates views when changes occur in complex object.</li><li><strong>Model-driven</strong>: Useful when binding a specific property of a model object.</li><li><strong>Use case</strong>: When managing more complex data structures, such as view models or shared app state.</li></ul><h3 id="example-1" tabindex="-1"><strong>Example</strong> <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;**Example**&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// First Step: Declare an Observable Object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Observable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// In the parent view, create an instance and pass it to the child</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: viewModel)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Here, use @Bindable to access the ViewModel and bind directly to its properties</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@Bindable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewModel: ViewModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		TextField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Enter your name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $viewModel.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li>The <strong>ViewModel</strong> automatically conforms to the <code>@ObservableObject</code> pattern.</li><li>We add the <code>@State</code> property wrapper to the ViewModel in the <strong>ParentView.</strong></li><li>The <strong>ChildView</strong> can access and directly bind to properties of the <strong>ViewModel.</strong> Any change in the <code>TextField</code> updates the name property, which immediately reflects in the <code>Text</code> view.</li></ol><h2 id="conclusion" tabindex="-1"><strong>Conclusion</strong> <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;**Conclusion**&quot;">​</a></h2><p>Understanding when to use <code>@Binding</code> or <code>@Bindable</code> in SwiftUI boils down to your app’s data structure and the complexity of your views. Use <code>@Binding</code> for simple, two-way value passing between views and <code>@Bindable</code> for managing properties within an Observable object.</p>`,24)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
