import{_ as t,c as a,a3 as i,o}from"./chunks/framework.ohJJpums.js";const n="/concepts/design-patterns/dp-sing.png",s="/concepts/design-patterns/dp-fac.png",r="/concepts/design-patterns/dp-abfac.png",c="/concepts/design-patterns/dp-builder.png",m=JSON.parse('{"title":"Creational Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"articles/concepts/design-patterns/creational-patterns.md","filePath":"articles/concepts/design-patterns/creational-patterns.md"}'),l={name:"articles/concepts/design-patterns/creational-patterns.md"};function d(h,e,p,f,u,b){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="creational-patterns" tabindex="-1">Creational Patterns <a class="header-anchor" href="#creational-patterns" aria-label="Permalink to &quot;Creational Patterns&quot;">â€‹</a></h1><p><em>Last Updated: Dec 7, 2024</em></p><p>Creational patterns help manage and streamline object creation, making it more flexible, efficient, and suitable for various situations.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>I am only listing the ones that I&#39;ve been dealing with or interact with a couple of times ðŸ˜ƒ</p></div><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">â€‹</a></h2><ul><li><code>Singleton</code>: Ensures only one instance of a class exists and provides a global access point to it. Great for managing shared resources, like logging or configuration settings.</li><li><code>Factory Method</code>: Defines an interface for creating objects, letting subclasses decide the object type. Useful when you need to delegate creation to subclasses based on runtime conditions.</li><li><code>Abstract Factory</code>: Creates families of related objects without specifying concrete classes. Ideal for systems supporting multiple themes, platforms, or configurations.</li><li><code>Builder</code>: Separates complex object construction from its representation, allowing flexible and step-by-step creation. Handy for creating objects with many optional parameters.</li></ul><h2 id="singleton-pattern" tabindex="-1">Singleton Pattern <a class="header-anchor" href="#singleton-pattern" aria-label="Permalink to &quot;Singleton Pattern&quot;">â€‹</a></h2><h3 id="definition" tabindex="-1">Definition <a class="header-anchor" href="#definition" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>Singleton Pattern</code> is designed to ensure that only one instance exists and provides a global acces point to it. It is ideal for shared resources, such as configuration settings, logging, or managing connections.</p><h3 id="flow" tabindex="-1">Flow <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><div style="display:flex;justify-content:center;"><img src="'+n+'" alt="Diagram representing how the MVC design pattern works" class="small-image"></div><ul><li><code>Instance Creation</code>: When the application requests an instance of the Singleton, it checks if one already exists.</li><li><code>Global Access</code>: If an instance does not exist, it creates one. Subsequent requests return the same instance.</li><li><code>Usage</code>: Any part of the application can access the Singleton instance and interact with its methods or properties.</li></ul><h2 id="factory-method-pattern" tabindex="-1">Factory Method Pattern <a class="header-anchor" href="#factory-method-pattern" aria-label="Permalink to &quot;Factory Method Pattern&quot;">â€‹</a></h2><h3 id="definition-1" tabindex="-1">Definition <a class="header-anchor" href="#definition-1" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>Factory Method Pattern</code> defines an inteface for creating objects, allowing subclasses to alter the type of objects created. This pattern is beneficial when the exact object type isn&#39;t known until runtime.</p><h3 id="flow-1" tabindex="-1">Flow <a class="header-anchor" href="#flow-1" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><div style="display:flex;justify-content:center;"><img src="'+s+'" alt="Diagram representing how the MVC design pattern works" class="small-image"></div><ul><li><code>Method Definition</code>: A factory method is defined in a base class to create objects of a specific type.</li><li><code>Subclass Implementation</code>: Sublasses implement the factory method to produce different object types.</li><li><code>Usage</code>: The client calls the factory method without knowing the specific class of object it will recevive.</li></ul><h2 id="abstract-factory-pattern" tabindex="-1">Abstract Factory Pattern <a class="header-anchor" href="#abstract-factory-pattern" aria-label="Permalink to &quot;Abstract Factory Pattern&quot;">â€‹</a></h2><h3 id="definition-2" tabindex="-1">Definition <a class="header-anchor" href="#definition-2" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>Abstract Factory Pattern</code> provides an interface to create families of related objects without specifying their concrete class.</p><h3 id="flow-2" tabindex="-1">Flow <a class="header-anchor" href="#flow-2" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><div style="display:flex;justify-content:center;"><img src="'+r+'" alt="Diagram representing how the MVC design pattern works"></div><ul><li><code>Factory Interface</code>: An abstract factory defines methods for creating related products</li><li><code>Concrete Factories</code>: Implementations of the abstract factory create specific product variants.</li><li><code>Usage</code>: The client uses the factory interface to obtain product families without knowing the specific product classes.</li></ul><h2 id="builder-pattern" tabindex="-1">Builder Pattern <a class="header-anchor" href="#builder-pattern" aria-label="Permalink to &quot;Builder Pattern&quot;">â€‹</a></h2><h3 id="definition-3" tabindex="-1">Definition <a class="header-anchor" href="#definition-3" aria-label="Permalink to &quot;Definition&quot;">â€‹</a></h3><p>The <code>Builder Pattern</code> lets us construct complex objects step by step. Itâ€™s useful for objects with multiple configurable fields or complex assembly processes.</p><h3 id="flow-3" tabindex="-1">Flow <a class="header-anchor" href="#flow-3" aria-label="Permalink to &quot;Flow&quot;">â€‹</a></h3><div style="display:flex;justify-content:center;"><img src="'+c+'" alt="Diagram representing how the MVC design pattern works"></div><ul><li><code>Builder Class</code>: The builder class defines steps to create various parts of the object.</li><li><code>Director (Optional)</code>: A director class can control the building process to create a specific configuration.</li><li><code>Usage</code>: The client uses the builder to construct an object by specifying only the desired properties.</li></ul>',30)]))}const y=t(l,[["render",d]]);export{m as __pageData,y as default};
